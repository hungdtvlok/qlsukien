package com.example.qlsukien;

import android.app.AlertDialog;
import android.app.DatePickerDialog;
import android.app.TimePickerDialog;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.TimePicker;
import android.widget.Toast;

import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;
import com.android.volley.toolbox.JsonObjectRequest;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

import androidx.appcompat.widget.Toolbar;
import androidx.drawerlayout.widget.DrawerLayout;
import androidx.appcompat.app.ActionBarDrawerToggle;
import com.google.android.material.navigation.NavigationView;
import android.content.Intent;
import java.util.Collections;

import android.util.Log;

/**
 * Activity qu·∫£n l√Ω Ng∆∞·ªùi Tham Gia (Participant)
 * - Xem danh s√°ch
 * - T√¨m ki·∫øm
 * - Th√™m, s·ª≠a, x√≥a
 */
public class NguoithamgiaActivity extends AppCompatActivity {

    private EditText etSearchPlate;
    private RecyclerView recyclerNguoithamgia;
    private NguoithamgiaAdapter adapter;
    private ArrayList<Nguoithamgia> listNguoi = new ArrayList<>();

    private static final String BASE_URL = "https://qlsukien-1.onrender.com/api/participants";

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_nguoithamgia);

        etSearchPlate = findViewById(R.id.etSearchPlate);
        recyclerNguoithamgia = findViewById(R.id.recyclerNguoithamgia);

        recyclerNguoithamgia.setLayoutManager(new LinearLayoutManager(this));
        adapter = new NguoithamgiaAdapter(this, listNguoi, new NguoithamgiaAdapter.OnItemClickListener() {
            @Override
            public void onEdit(Nguoithamgia item) {
                showEditDialog(item);
            }

            @Override
            public void onDelete(Nguoithamgia item) {
                confirmDelete(item);
            }
        });
        recyclerNguoithamgia.setAdapter(adapter);

        loadParticipants();

        etSearchPlate.addTextChangedListener(new TextWatcher() {
            @Override public void beforeTextChanged(CharSequence s, int start, int count, int after) {}
            @Override public void onTextChanged(CharSequence s, int start, int before, int count) {
                adapter.filter(s.toString());
            }
            @Override public void afterTextChanged(Editable s) {}
        });

        // n√∫t th√™m
        findViewById(R.id.btnAddNguoithamgia).setOnClickListener(v -> showAddDialog());

        // ch·ªó 3 g·∫°ch

        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);

        DrawerLayout drawerLayout = findViewById(R.id.drawer_layout);
        NavigationView navigationView = findViewById(R.id.navigation_view);

// T·∫°o n√∫t 3 g·∫°ch
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawerLayout, toolbar,
                R.string.navigation_drawer_open,
                R.string.navigation_drawer_close
        );
        drawerLayout.addDrawerListener(toggle);
        toggle.syncState();

// B·∫Øt s·ª± ki·ªán ch·ªçn menu
        navigationView.setNavigationItemSelectedListener(item -> {
            int id = item.getItemId();

            if (id == R.id.nav_trangchu) {
                // Chuy·ªÉn sang trang qu·∫£n l√Ω s·ª± ki·ªán
                Intent intent = new Intent(this, MainActivity.class);
                startActivity(intent);
            } else if (id == R.id.nav_sukien) {
                // Chuy·ªÉn sang trang qu·∫£n l√Ω s·ª± ki·ªán
                Intent intent = new Intent(this, SuKienActivity.class);
                startActivity(intent);
            } else if (id == R.id.nav_dangky) {
                // Chuy·ªÉn sang trang qu·∫£n l√Ω ng∆∞·ªùi ƒëƒÉng k√Ω
                Intent intent = new Intent(this, SuKienDaDangKyAllActivity.class);
                startActivity(intent);
            } else if (id == R.id.nav_thamgia) {

            } else if (id == R.id.nav_thongke) {

                Intent intent = new Intent(this, ThongKeActivity.class);
                startActivity(intent);
            } else if (id == R.id.nav_thoat) {

                showExitDialog();
            }

            // ƒê√≥ng menu sau khi ch·ªçn
            drawerLayout.closeDrawers();
            return true;
        });
    }
    // üß≠ H√†m hi·ªÉn th·ªã h·ªôp tho·∫°i x√°c nh·∫≠n tho√°t
    private void showExitDialog() {
        new AlertDialog.Builder(this)
                .setTitle("X√°c nh·∫≠n ƒëƒÉng xu·∫•t")
                .setMessage("B·∫°n c√≥ ch·∫Øc mu·ªën ƒëƒÉng xu·∫•t v√† quay l·∫°i m√†n h√¨nh ƒëƒÉng nh·∫≠p kh√¥ng?")
                .setPositiveButton("C√≥", (dialog, which) -> {
                    Intent intent = new Intent(this, LoginActivity.class);
                    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
                    startActivity(intent);
                    finish(); // ƒê√≥ng Activity hi·ªán t·∫°i
                })
                .setNegativeButton("Kh√¥ng", null)
                .show();
    }

    /**
     * Load danh s√°ch participants t·ª´ API
     */
    private void loadParticipants() {
        RequestQueue queue = Volley.newRequestQueue(this);

        JsonObjectRequest request = new JsonObjectRequest(Request.Method.GET, BASE_URL, null,
                response -> {
                    listNguoi.clear();
                    try {
                        JSONArray arr = response.getJSONArray("participants");
                        for (int i = 0; i < arr.length(); i++) {
                            JSONObject obj = arr.getJSONObject(i);
                            Nguoithamgia item = new Nguoithamgia(
                                    obj.optString("_id"),
                                    obj.optString("fullName"),
                                    obj.optString("email"),
                                    obj.optString("phone"),
                                    obj.optString("eventName"),
                                    formatDate(obj.optString("startTime")),
                                    formatDate(obj.optString("endTime")),
                                    obj.optString("registeredBy"),
                                    formatDate(obj.optString("createdAt"))
                            );
                            listNguoi.add(item);
                        }

                        // üîπ S·∫Øp x·∫øp theo t√™n s·ª± ki·ªán A ‚Üí Z, n·∫øu tr√πng th√¨ s·∫Øp x·∫øp theo createdAt (c≈© ‚Üí m·ªõi)
                        Collections.sort(listNguoi, (p1, p2) -> {
                            int nameCompare = p1.getEventName().compareToIgnoreCase(p2.getEventName());
                            if (nameCompare != 0) {
                                return nameCompare; // s·∫Øp x·∫øp theo t√™n s·ª± ki·ªán
                            } else {
                                try {
                                    // parse t·ª´ format ƒë√£ d√πng
                                    SimpleDateFormat displayFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault());
                                    Date date1 = displayFormat.parse(p1.getCreatedAt());
                                    Date date2 = displayFormat.parse(p2.getCreatedAt());
                                    return date1.compareTo(date2); // c≈© ‚Üí m·ªõi
                                } catch (Exception e) {
                                    return 0; // n·∫øu l·ªói parse
                                }
                            }
                        });


                        adapter.updateList(listNguoi);
                    } catch (JSONException e) {
                        e.printStackTrace();
                    }
                },
                error -> Toast.makeText(this, "‚ùå L·ªói t·∫£i d·ªØ li·ªáu", Toast.LENGTH_SHORT).show()
        );

        queue.add(request);
    }


    /**
     * Dialog th√™m participant
     */
    private void showAddDialog() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Th√™m ng∆∞·ªùi tham gia");

        View view = getLayoutInflater().inflate(R.layout.dialog_nguoithamgia, null);
        EditText etFullName = view.findViewById(R.id.etFullName);
        EditText etEmail = view.findViewById(R.id.etEmail);
        EditText etPhone = view.findViewById(R.id.etPhone);
        EditText etEventName = view.findViewById(R.id.etEventName);
        EditText etStartTime = view.findViewById(R.id.etStartTime);
        EditText etEndTime = view.findViewById(R.id.etEndTime);
        EditText etRegisteredBy = view.findViewById(R.id.etRegisteredBy);

        // ch·ªçn ng√†y gi·ªù - hi·ªÉn th·ªã d·∫°ng dd/MM/yyyy HH:mm
        View.OnClickListener pickDateTime = v -> {
            final EditText target = (EditText) v;
            Calendar calendar = Calendar.getInstance();
            DatePickerDialog datePicker = new DatePickerDialog(this,
                    (DatePicker view1, int year, int month, int dayOfMonth) -> {
                        TimePickerDialog timePicker = new TimePickerDialog(this,
                                (TimePicker timeView, int hourOfDay, int minute) -> {
                                    // Hi·ªÉn th·ªã d·∫°ng dd/MM/yyyy HH:mm
                                    String dateTime = String.format(Locale.getDefault(),
                                            "%02d/%02d/%04d %02d:%02d",
                                            dayOfMonth, month + 1, year, hourOfDay, minute);
                                    target.setText(dateTime);
                                },
                                calendar.get(Calendar.HOUR_OF_DAY),
                                calendar.get(Calendar.MINUTE),
                                true);
                        timePicker.show();
                    },
                    calendar.get(Calendar.YEAR),
                    calendar.get(Calendar.MONTH),
                    calendar.get(Calendar.DAY_OF_MONTH));
            datePicker.show();
        };
        etStartTime.setOnClickListener(pickDateTime);
        etEndTime.setOnClickListener(pickDateTime);


        builder.setView(view);

        builder.setPositiveButton("L∆∞u", (dialog, which) -> {
            addParticipant(
                    etFullName.getText().toString(),
                    etEmail.getText().toString(),
                    etPhone.getText().toString(),
                    etEventName.getText().toString(),
                    etStartTime.getText().toString(),
                    etEndTime.getText().toString(),
                    etRegisteredBy.getText().toString()
            );
        });
        builder.setNegativeButton("H·ªßy", null);
        builder.show();
    }

    private void addParticipant(String fullName, String email, String phone,
                                String eventName, String startTime, String endTime, String registeredBy) {
        RequestQueue queue = Volley.newRequestQueue(this);

        // üîπ Chuy·ªÉn sang ISO tr∆∞·ªõc khi g·ª≠i
        String isoStart = toISODate(startTime);
        String isoEnd   = toISODate(endTime);

        JSONObject body = new JSONObject();
        try {
            body.put("fullName", fullName);
            body.put("email", email);
            body.put("phone", phone);
            body.put("eventName", eventName);
            body.put("startTime", isoStart);
            body.put("endTime", isoEnd);
            body.put("registeredBy", registeredBy);
        } catch (JSONException e) {
            e.printStackTrace();
        }

        JsonObjectRequest request = new JsonObjectRequest(Request.Method.POST, BASE_URL, body,
                response -> {
                    Toast.makeText(this, "‚úÖ Th√™m th√†nh c√¥ng", Toast.LENGTH_SHORT).show();
                    loadParticipants();
                },
                error -> Toast.makeText(this, "‚ùå L·ªói khi th√™m", Toast.LENGTH_SHORT).show()
        );
        queue.add(request);
    }

    /**
     * Dialog s·ª≠a participant
     */
    private void showEditDialog(Nguoithamgia item) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("S·ª≠a th√¥ng tin");

        View view = getLayoutInflater().inflate(R.layout.dialog_nguoithamgia, null);
        EditText etFullName = view.findViewById(R.id.etFullName);
        EditText etEmail = view.findViewById(R.id.etEmail);
        EditText etPhone = view.findViewById(R.id.etPhone);
        EditText etEventName = view.findViewById(R.id.etEventName);
        EditText etStartTime = view.findViewById(R.id.etStartTime);
        EditText etEndTime = view.findViewById(R.id.etEndTime);
        EditText etRegisteredBy = view.findViewById(R.id.etRegisteredBy);

        etFullName.setText(item.getFullName());
        etEmail.setText(item.getEmail());
        etPhone.setText(item.getPhone());
        etEventName.setText(item.getEventName());
        etStartTime.setText(formatDate(item.getStartTime()));
        etEndTime.setText(formatDate(item.getEndTime()));
        etRegisteredBy.setText(item.getRegisteredBy());

        // ch·ªçn ng√†y gi·ªù - hi·ªÉn th·ªã d·∫°ng dd/MM/yyyy HH:mm
        View.OnClickListener pickDateTime = v -> {
            final EditText target = (EditText) v;
            Calendar calendar = Calendar.getInstance();
            DatePickerDialog datePicker = new DatePickerDialog(this,
                    (DatePicker view1, int year, int month, int dayOfMonth) -> {
                        TimePickerDialog timePicker = new TimePickerDialog(this,
                                (TimePicker timeView, int hourOfDay, int minute) -> {
                                    // Hi·ªÉn th·ªã d·∫°ng dd/MM/yyyy HH:mm
                                    String dateTime = String.format(Locale.getDefault(),
                                            "%02d/%02d/%04d %02d:%02d",
                                            dayOfMonth, month + 1, year, hourOfDay, minute);
                                    target.setText(dateTime);
                                },
                                calendar.get(Calendar.HOUR_OF_DAY),
                                calendar.get(Calendar.MINUTE),
                                true);
                        timePicker.show();
                    },
                    calendar.get(Calendar.YEAR),
                    calendar.get(Calendar.MONTH),
                    calendar.get(Calendar.DAY_OF_MONTH));
            datePicker.show();
        };
        etStartTime.setOnClickListener(pickDateTime);
        etEndTime.setOnClickListener(pickDateTime);


        builder.setView(view);

        builder.setPositiveButton("C·∫≠p nh·∫≠t", (dialog, which) -> {
            updateParticipant(
                    item.getId(),
                    etFullName.getText().toString(),
                    etEmail.getText().toString(),
                    etPhone.getText().toString(),
                    etEventName.getText().toString(),
                    etStartTime.getText().toString(),
                    etEndTime.getText().toString(),
                    etRegisteredBy.getText().toString()
            );
        });



        builder.setNegativeButton("H·ªßy", null);
        builder.show();
    }

    /**
     * API c·∫≠p nh·∫≠t participant
     */
    // H√†m chuy·ªÉn ƒë·ªãnh d·∫°ng sang ISO UTC g·ª≠i l√™n server
    private String toISODate(String dateTime) {
        try {
            SimpleDateFormat inputFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.US);
            Date date = inputFormat.parse(dateTime);

            SimpleDateFormat isoFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.US);
            isoFormat.setTimeZone(TimeZone.getTimeZone("UTC")); // √©p UTC
            return isoFormat.format(date);
        } catch (Exception e) {
            e.printStackTrace();
            return dateTime;
        }
    }
    private void updateParticipant(String id, String fullName, String email, String phone,
                                   String eventName, String startTime, String endTime, String registeredBy) {

        String url = "https://qlsukien-1.onrender.com/api/participants/" + id;

        // üîπ Chuy·ªÉn sang ISO tr∆∞·ªõc khi g·ª≠i
        String isoStart = toISODate(startTime);
        String isoEnd   = toISODate(endTime);

        JSONObject putData = new JSONObject();
        try {
            putData.put("fullName", fullName);
            putData.put("email", email);
            putData.put("phone", phone);
            putData.put("eventName", eventName);
            putData.put("startTime", isoStart);
            putData.put("endTime", isoEnd);
            putData.put("registeredBy", registeredBy);
        } catch (JSONException e) {
            e.printStackTrace();
            Toast.makeText(this, "L·ªói t·∫°o JSON update", Toast.LENGTH_SHORT).show();
            return;
        }

        RequestQueue queue = Volley.newRequestQueue(this);
        JsonObjectRequest request = new JsonObjectRequest(
                Request.Method.PUT,
                url,
                putData,
                response -> {
                    Toast.makeText(this, "‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng", Toast.LENGTH_SHORT).show();
                    loadParticipants();
                    },
                error -> {
                    String errorMsg = "‚ùå L·ªói khi c·∫≠p nh·∫≠t";
                    if (error.networkResponse != null && error.networkResponse.data != null) {
                        try {
                            String data = new String(error.networkResponse.data);
                            JSONObject obj = new JSONObject(data);
                            if (obj.has("message")) errorMsg = obj.getString("message");
                        } catch (Exception ignored) {}
                    }
                    Toast.makeText(this, errorMsg, Toast.LENGTH_SHORT).show();
                    Log.e("VOLLEY_ERROR", errorMsg, error);
                }
        );

        queue.add(request);
    }



    private void confirmDelete(Nguoithamgia item) {
        new AlertDialog.Builder(this)
                .setTitle("X√≥a ng∆∞·ªùi tham gia")
                .setMessage("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a " + item.getFullName() + " kh√¥ng?")
                .setPositiveButton("X√≥a", (dialog, which) -> deleteParticipant(item))
                .setNegativeButton("H·ªßy", null)
                .show();
    }

    private void deleteParticipant(Nguoithamgia item) {
        RequestQueue queue = Volley.newRequestQueue(this);
        String url = BASE_URL + "/" + item.getId();

        StringRequest request = new StringRequest(Request.Method.DELETE, url,
                response -> {
                    Toast.makeText(this, "‚úÖ ƒê√£ x√≥a th√†nh c√¥ng", Toast.LENGTH_SHORT).show();
                    loadParticipants();
                },
                error -> Toast.makeText(this, "‚ùå L·ªói khi x√≥a", Toast.LENGTH_SHORT).show()
        );
        queue.add(request);
    }

    private String formatDate(String isoDate) {
        try {
            SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSX", Locale.getDefault());
            Date date = inputFormat.parse(isoDate);
            SimpleDateFormat outputFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm", Locale.getDefault());
            return outputFormat.format(date);
        } catch (ParseException e) {
            e.printStackTrace();
            return isoDate;
        }
    }
}
